name: Main Checks, Build and Deploy
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gem-test:
    runs-on: ubuntu-latest

    env:
      RACK_ENV: test
      RAILS_ENV: test
    defaults:
      run:
        working-directory: ./gems/laa_multi_step_forms
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./gems/laa_multi_step_forms

      - name: Run linters
        run: bundle exec rubocop

      - name: Run tests
        run: bundle exec rspec

      - name: Upload rspec coverage (if failure)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: rspec-coverage
          path: coverage/*

  test:
    runs-on: ubuntu-latest

    env:
      RACK_ENV: test
      RAILS_ENV: test
      DATABASE_URL: "postgresql://postgres:postgres@127.0.0.1/laa-claim-non-standard-magistrate-fee-test"

    services:
      postgres:
        image: postgres:14.6-alpine
        env:
          POSTGRES_DB: laa-claim-non-standard-magistrate-fee-test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Find yarn cache location
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: JS package cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages with yarn
        run: yarn install --frozen-lockfile --ignore-scripts

      - name: Precompile assets
        run: bin/rails dartsass:build

      - name: Setup test database
        run: bin/rails db:prepare

      - name: Run linters
        run: bundle exec rubocop

      - name: Run tests
        run: bundle exec rspec

      - name: Run testing framework
        run: yarn unit-test --passWithNoTests


      - name: Upload rspec coverage (if failure)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: rspec-coverage
          path: coverage/*

      - name: Upload JS System failure images
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: JS-System-failures
          path: tmp/capybara/*

  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    needs: [gem-test, test]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

    # Assume role in Cloud Platform
      - uses: aws-actions/configure-aws-credentials@v4
        id: credentials
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      # Login to container repository
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Store current date
        run: echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Build
        run: |
          docker build \
            --label build.git.sha=${{ github.sha }} \
            --label build.git.branch=${{ github.ref }} \
            --label build.date=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_DATE=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_TAG=${{ github.sha }} \
            --build-arg APP_GIT_COMMIT=${{ github.sha }} \
            --build-arg APP_BRANCH_NAME=${{ github.ref }} \
            -t app .

      # Build and push a Docker image to the container repository
      - name: Push to ECR
        run: |
          docker tag app $REGISTRY/$REPOSITORY:$IMAGE_TAG-latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG-latest
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to the cluster
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE }}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy to Dev
        run: |
          helm upgrade laa-claim-non-standard-magistrate-fee-backend ./helm_deploy/. \
              --install --wait --force \
              --namespace=${{ secrets.KUBE_NAMESPACE }} \
              --values ./helm_deploy/values-dev.yaml \
              --set image.repository="${{ secrets.ECR_URL }}" \
              --set image.tag="${{ github.sha }}-latest" \
              --atomic
  deploy-uat:
    runs-on: ubuntu-latest
    needs: build
    environment: uat

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to the cluster
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE}}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy to UAT
        run: |
          helm upgrade laa-claim-non-standard-magistrate-fee-backend ./helm_deploy/. \
              --install --wait --force \
              --namespace=${{ secrets.KUBE_NAMESPACE}} \
              --values ./helm_deploy/values-uat.yaml \
              --set image.repository="${{ secrets.ECR_URL }}" \
              --set image.tag="${{ github.sha }}-latest" \
              --atomic
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to the cluster
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE}}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy to Production
        run: |
          helm upgrade laa-claim-non-standard-magistrate-fee-backend ./helm_deploy/. \
              --install --wait --force \
              --namespace=${{ secrets.KUBE_NAMESPACE}} \
              --values ./helm_deploy/values-prod.yaml \
              --set image.repository="${{ secrets.ECR_URL }}" \
              --set image.tag="${{ github.sha }}-latest" \
              --atomic