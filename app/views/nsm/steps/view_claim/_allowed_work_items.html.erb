<% title t('.page_title') %>

<h3 class="govuk-heading-m">
  <%= t('.work_items') %>
</h3>

<% pagy, work_items = pagy_array(@work_items.filter{ _1.adjustment_comment.present? }, items: 100) %>

<% if work_items.none? %>
  <p><%= t('.no_data') %></p>
<% else %>
  <%= govuk_details(summary_text: t('.check_totals')) do %>
    <%=
      head = [
        { text: '', width: 'govuk-!-width-one-third' },
        { text: t('.time'), numeric: true },
        { text: t('.net_cost'), numeric: true },
        { text: t('.allowed_time'), numeric: true },
        { text: t('.allowed_net_cost'), numeric: true },
      ]

      total_cost = BigDecimal('0')
      allowed_total_cost = BigDecimal('0')
      vat_rate = current_application.firm_office.vat_registered == 'true' ? Pricing.new(@claim).vat : 0
      sorted_work_items = @work_items.sort_by(&:sort_position)

      rows = sorted_work_items.group_by(&:assessed_work_type).map do |work_type, work_items_for_type|
        time = work_items_for_type.sum(&:time_spent)
        net_cost = work_items_for_type.sum(&:total_cost)
        allowed_time = work_items_for_type.sum { _1.allowed_time_spent || _1.time_spent }
        allowed_net_cost = work_items_for_type.sum(&:allowed_total_cost)
        total_cost += net_cost
        allowed_total_cost += allowed_net_cost
        translated_work_type = t("summary.nsm/cost_summary/work_items.#{work_type.to_s}")
        translated_work_type = "#{translated_work_type} *" if work_items_for_type.any? { _1.allowed_work_type.present? }

        [
          { text: translated_work_type, width: 'govuk-!-width-one-quarter' },
          { text: format_period(time, style: :minimal_html), numeric: true },
          { text: NumberTo.pounds(net_cost), numeric: true },
          { text: format_period(allowed_time, style: :minimal_html), numeric: true },
          { text: NumberTo.pounds(allowed_net_cost), numeric: true },
        ]
      end

      foot = [
        { text: t(".total"), width: 'govuk-!-width-one-quarter' },
        { text: '', numeric: true },
        { text: safe_join([govuk_visually_hidden(t('.accessibility.net_cost')) , NumberTo.pounds(total_cost)], ' '), numeric: true },
        { text: '', numeric: true },
        { text: safe_join([govuk_visually_hidden(t('.accessibility.allowed_net_cost')) , NumberTo.pounds(allowed_total_cost)], ' '), numeric: true },
      ]

      govuk_table do |table|
        table.with_caption(text: t('.accessibility.work_summary_caption'), html_attributes: { 'class': 'govuk-visually-hidden'} )
        table.with_head(rows: [head])
        table.with_body(rows: rows, first_cell_is_header: true)
        table.with_foot(rows: foot)
      end
    %>

    <% if @work_items.any? { _1.allowed_work_type.present? } %>
      <p><%= t('.type_change_explanation') %></p>
    <% end %>
  <% end %>

  <%=
    head = {
      'line_item' => { numeric: false },
      'item' => { numeric: false },
      'adjustment_comment' => { sortable: false, numeric: false },
      'allowed_time' => { numeric: [] },
      'allowed_uplift' => { numeric: [] },
      'allowed_net_cost' => { numeric: [] },
    }

    rows = work_items.map do |work_item|
      item_with_link = link_to(t("summary.nsm/cost_summary/work_items.#{work_item.assessed_work_type.to_s}"),
                               item_nsm_steps_view_claim_path(id: current_application.id,
                                                              item_type: :work_item,
                                                              item_id: work_item.id,
                                                              page: pagy.page))

      to_display = work_item.allowed_work_type.present? ? safe_join([item_with_link, " *"]) : item_with_link

      [
        { header: true, text: work_item.position, numeric: false},
        { header: true, text: to_display, numeric: false},
        { text: work_item.adjustment_comment, numeric: false},
        { text: format_period(work_item.allowed_time_spent || work_item.time_spent, style: :minimal_html), numeric: true },
        { text: NumberTo.percentage((work_item.allowed_uplift || work_item.uplift).to_f, multiplier: 1), numeric: true },
        { text: NumberTo.pounds(work_item.allowed_total_cost), numeric: true },
      ]
    end

    header_row = head.map.with_index do |(column_key, properties), index|
      unless properties[:sortable] == false
        aria_sort, next_direction = sort_variable(column_key, @sort_by, @sort_direction)
        {
          text: reorder_form(adjustments_work_items_nsm_steps_view_claim_path(current_application, anchor: "claim_nav"), column_key, next_direction, "nsm.steps.view_claim.allowed_work_items", index),
          numeric: properties[:numeric],
          html_attributes: { 'aria-sort': aria_sort}
        }
      else
        {
          text: t("nsm.steps.view_claim.allowed_work_items.#{column_key}"),
          numeric: properties[:numeric],
        }
      end
    end

    govuk_table_with_cell(header_row, rows, caption: { text: t('.accessibility.work_items_caption'), html_attributes: { 'class': 'govuk-visually-hidden'} })
  %>
  <% if work_items.any? { _1.allowed_work_type.present? } %>
    <p><%= t('.type_change_explanation') %></p>
  <% end %>
  <%= render "shared/pagination",  { pagy: pagy, item: t('.table_info_item') } %>
<% end %>
