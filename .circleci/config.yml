# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# ------------------
# ORBS
# ------------------
orbs:
  ruby: circleci/ruby@2.1.0
  browser-tools: circleci/browser-tools@1.4.5
  snyk: snyk/snyk@1.1.2
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@8.2.1

# ------------------
# EXECUTORS
# ------------------
executors:
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.2.2-browsers
        environment:
          RACK_ENV: test
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_claim_non_standard_magistrate_fee_test
          OMNIAUTH_TEST_MODE: true
      - image: cimg/postgres:13.12
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laa_claim_non_standard_magistrate_fee_test

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

# ------------------
# REFERENCES
# ------------------
references:
  _main-only: &main-only
    filters:
      branches:
        only: main

  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v1-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path 'vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3
        bundle clean --force

  _save-bundle: &save-bundle
    save_cache:
      key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/.bundle
        - vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        RUBYOPT=-W:no-deprecated \
        yarn install && bin/rails dartsass:build

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - app/assets/builds

  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: ~/repo/tmp

# ------------------
# COMMANDS
# ------------------
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  build-base:
    steps:
      - install-gems
      - install-compile-assets

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            bundle exec rails db:prepare

  rspec:
    steps:
      - save_cache:
          key: nsmf-claim-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo
      - db-setup
      - run:
          name: Run rspec tests
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
            RUBYOPT=-W:no-deprecated \
            bundle exec rspec \
             --format progress \
             --format RspecJunitFormatter \
             --out /tmp/test-results/rspec/rspec.xml \
            -- ${TESTFILES}
      - store_test_results:
          path: /tmp/test-results/rspec
      - restore_cache:
          key: nsmf-claim-repo-{{ .Environment.CIRCLE_SHA1 }}
      - store_artifacts:
          path: ~/repo/coverage
          destination: coverage

  rspec-gem-specs:
    steps:
      - run:
          name: Run rspec tests
          command: |
            bundle exec rspec

  build-docker-image-for-test:
      steps:
        - run:
            name: Build docker image for app
            command: |
              docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_TAG=${CIRCLE_SHA1} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH} \
              --pull \
              --tag app \
              --file Dockerfile .\


# ------------------
# JOBS
# ------------------
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - build-base

  linter-tests:
    executor: test-executor
    steps:
      - checkout
      - install-gems
      - rubocop

  rspec-tests:
    executor: test-executor
    steps:
      - checkout
      - install-gems
      - install-compile-assets
      - *attach-tmp-workspace
      - browser-tools/install-browser-tools
      - rspec

  rspec-gem-tests:
    executor: test-executor
    working_directory: ~/repo/gems/laa_multi_step_forms
    steps:
      - checkout:
          path: ~/repo
      - install-gems
      - rspec-gem-specs

  scan-docker-image:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-docker-image-for-test
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: app
          target-file: ./Dockerfile
          organization: 'legal-aid-agency'
          project: ministryofjustice/laa-assess-non-magistrate-fee
          severity-threshold: "high"
          fail-on-issues: true

  build-to-ecr:
    executor: aws-ecr/default
    steps:
      - checkout
      - run:
          name: Create target tags
          command: |
            source .circleci/define_build_environment_variables
            echo "Created tags $TARGET_TAGS"
            echo "export BUILD_TAGS=$TARGET_TAGS" >> $BASH_ENV
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region $ECR_REGION | docker login \
            --username AWS --password-stdin \
            ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - aws-ecr/build-image:
          push-image: true
          tag: $IMAGE_TAG
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
          extra-build-args: |
            --build-arg APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
            --build-arg APP_BUILD_TAG=${CIRCLE_SHA1} \
            --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
            --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH} \

  deploy-to-environment:
    description: Deploy image to the specified environment
    executor: cloud-platform-executor
    parameters:
      environment:
        description: Name of environment to deploy to
        type: string
      registry:
        description: Location of ECR images
        type: string
        default: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      dynamic_hostname:
        type: boolean
    steps:
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - checkout
      - run:
          name: Authenticate K8s
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_URL}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
            source .circleci/define_build_environment_variables << parameters.dynamic_hostname >>
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            echo "export RELEASE_HOST=$RELEASE_HOST" >> $BASH_ENV
      - run:
          name: Deploy to << parameters.environment >>
          command: |
            ./bin/deploy << parameters.registry >> << parameters.environment >>


#  deploy-dev:
#    executor: cloud-platform-executor
#    steps:
#      - deploy-to-environment:
#          environment: dev
#
#  deploy-dev-crm4:
#    executor: cloud-platform-executor
#    steps:
#      - deploy-to-environment:
#          environment: dev-crm4
#
#  deploy-uat:
#    executor: cloud-platform-executor
#    steps:
#      - deploy-to-environment:
#          environment: uat
#
#  deploy-prod:
#    executor: cloud-platform-executor
#    steps:
#      - deploy-to-environment:
#          environment: prod

# ------------------
# WORKFLOWS
# ------------------
workflows:
  test:
    jobs:
      - build-test-container:
          filters:
            branches:
              ignore:
                - main
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - rspec-gem-tests:
          requires:
            - build-test-container
      - scan-docker-image:
          requires:
            - rspec-tests

  build-push-branch:
    jobs:
      - branch-build-approval:
          type: approval
          filters:
            branches:
              ignore:
                - main
      - build-to-ecr:
          context: laa-claim-non-standard-magistrates-fee-dev
          requires:
            - branch-build-approval
      - hold-dev:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_dev
          environment: dev
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-dev
          requires:
            - hold-dev
      - hold-dev-crm4:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_dev_crm4
          environment: dev-crm4
          dynamic_hostname: true
          context: laa-claim-non-standard-magistrates-fee-dev-crm4
          requires:
            - hold-dev-crm4
      - hold-uat:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_uat
          environment: uat
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-uat
          requires:
            - hold-uat

  build-deploy-main:
    jobs:
      - build-to-ecr:
          <<: *main-only
          context: laa-claim-non-standard-magistrates-fee-dev
      - hold-dev:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_dev_main
          environment: dev
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-dev
          requires:
            - hold-dev
      - hold-dev-crm4:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_dev_crm4_main
          environment: dev-crm4
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-dev-crm4
          requires:
            - hold-dev-crm4
      - hold-uat:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_uat_main
          environment: uat
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-uat
          requires:
            - hold-uat
      - hold-prod:
          type: approval
          requires:
            - build-to-ecr
      - deploy-to-environment:
          name: deploy_prod
          environment: prod
          dynamic_hostname: false
          context: laa-claim-non-standard-magistrates-fee-prod
          requires:
            - hold-prod
